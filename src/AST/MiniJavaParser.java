/* MiniJavaParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. MiniJavaParser.java */
package AST;

import java.io.*;
public class MiniJavaParser/*@bgen(jjtree)*/implements MiniJavaParserTreeConstants, MiniJavaParserConstants {/*@bgen(jjtree)*/
  protected JJTMiniJavaParserState jjtree = new JJTMiniJavaParserState();public static void main(String[] args){
        MiniJavaParser minij = null;

        if (args.length > 0) {
            System.out.println("Reading " + args[0] + "...");
            try {
                InputStream istream = new FileInputStream(new File(args[0]));
                minij = new MiniJavaParser(istream);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("Reading from standard input...");
            minij = new MiniJavaParser(System.in);
        }

        try {
            SimpleNode n = minij.Program();
            PrettyPrintVisitor prettyPrintVisitor = new PrettyPrintVisitor();
            n.jjtAccept(prettyPrintVisitor, null);
        } catch (Exception e) {
            System.out.println("Something went downside: " + e.getMessage());
            e.printStackTrace();
    }
}

/* ====== Grammar Rules with Semantic actions ====== */
  final public SimpleNode Program() throws ParseException {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MainClass();
      label_1:
      while (true) {
        if (jj_2_1(3)) {
          ;
        } else {
          break label_1;
        }
        ClassDecl();
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public void MainClass() throws ParseException {/*@bgen(jjtree) MainClass */
  ASTMainClass jjtn000 = new ASTMainClass(JJTMAINCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
      Identifier();
      jj_consume_token(LBRACE);
      jj_consume_token(PUBLIC);
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(LPAREN);
      jj_consume_token(STRING);
      jj_consume_token(LSQUARE);
      jj_consume_token(RSQUARE);
      Identifier();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      Statement();
      jj_consume_token(RBRACE);
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void ClassDecl() throws ParseException {
    if (jj_2_2(3)) {
      ClassDeclSimple();
    } else if (jj_2_3(3)) {
      ClassDeclExtends();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void ClassDeclSimple() throws ParseException {/*@bgen(jjtree) ClassDeclSimple */
  ASTClassDeclSimple jjtn000 = new ASTClassDeclSimple(JJTCLASSDECLSIMPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
      Identifier();
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        if (jj_2_4(3)) {
          ;
        } else {
          break label_2;
        }
        VarDecl();
      }
      label_3:
      while (true) {
        if (jj_2_5(3)) {
          ;
        } else {
          break label_3;
        }
        MethodDecl();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void ClassDeclExtends() throws ParseException {/*@bgen(jjtree) ClassDeclExtends */
  ASTClassDeclExtends jjtn000 = new ASTClassDeclExtends(JJTCLASSDECLEXTENDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
      Identifier();
      jj_consume_token(EXTENDS);
      Identifier();
      jj_consume_token(LBRACE);
      label_4:
      while (true) {
        if (jj_2_6(3)) {
          ;
        } else {
          break label_4;
        }
        VarDecl();
      }
      label_5:
      while (true) {
        if (jj_2_7(3)) {
          ;
        } else {
          break label_5;
        }
        MethodDecl();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void VarDecl() throws ParseException {/*@bgen(jjtree) VarDecl */
  ASTVarDecl jjtn000 = new ASTVarDecl(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      Identifier();
      jj_consume_token(SEMI);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void MethodDecl() throws ParseException {/*@bgen(jjtree) MethodDecl */
  ASTMethodDecl jjtn000 = new ASTMethodDecl(JJTMETHODDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PUBLIC);
      Type();
      Identifier();
      jj_consume_token(LPAREN);
      FormalList();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_6:
      while (true) {
        if (jj_2_8(2)) {
          ;
        } else {
          break label_6;
        }
        VarDecl();
      }
      label_7:
      while (true) {
        if (jj_2_9(3)) {
          ;
        } else {
          break label_7;
        }
        Statement();
      }
      jj_consume_token(RETURN);
      Exp();
      jj_consume_token(SEMI);
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void FormalList() throws ParseException {/*@bgen(jjtree) FormalList */
  ASTFormalList jjtn000 = new ASTFormalList(JJTFORMALLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_11(3)) {
        Type();
        Identifier();
        label_8:
        while (true) {
          if (jj_2_10(3)) {
            ;
          } else {
            break label_8;
          }
          FormalRest();
        }
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void FormalRest() throws ParseException {/*@bgen(jjtree) FormalRest */
  ASTFormalRest jjtn000 = new ASTFormalRest(JJTFORMALREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COMMA);
      Type();
      Identifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void Type() throws ParseException {/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_12(3)) {
        jj_consume_token(BOOLEAN);
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
jjtn000.token = token;
      } else if (jj_2_13(2)) {
        jj_consume_token(INT);
        jj_consume_token(LSQUARE);
        jj_consume_token(RSQUARE);
jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
jjtn000.token = token; jjtn000.token.image = "int[]";
      } else if (jj_2_14(2)) {
        jj_consume_token(INT);
jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
jjtn000.token = token;
      } else if (jj_2_15(3)) {
        jj_consume_token(VOID);
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
jjtn000.token = token;
      } else if (jj_2_16(3)) {
        Identifier();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void Statement() throws ParseException {
    if (jj_2_17(3)) {
      Block();
    } else if (jj_2_18(3)) {
      If();
    } else if (jj_2_19(3)) {
      While();
    } else if (jj_2_20(3)) {
      Print();
    } else if (jj_2_21(2)) {
      Assign();
    } else if (jj_2_22(2)) {
      ArrayAssign();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Block() throws ParseException {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_9:
      while (true) {
        if (jj_2_23(3)) {
          ;
        } else {
          break label_9;
        }
        Statement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void If() throws ParseException {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      Exp();
      jj_consume_token(RPAREN);
      Statement();
      if (jj_2_24(2147483647)) {
        jj_consume_token(ELSE);
        Statement();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void While() throws ParseException {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Exp();
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void Print() throws ParseException {/*@bgen(jjtree) Print */
  ASTPrint jjtn000 = new ASTPrint(JJTPRINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRINT);
      jj_consume_token(LPAREN);
      Exp();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMI);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void Assign() throws ParseException {/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      jj_consume_token(ASSIGN);
      Exp();
      jj_consume_token(SEMI);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ArrayAssign() throws ParseException {/*@bgen(jjtree) ArrayAssign */
  ASTArrayAssign jjtn000 = new ASTArrayAssign(JJTARRAYASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      jj_consume_token(LSQUARE);
      Exp();
      jj_consume_token(RSQUARE);
      jj_consume_token(ASSIGN);
      Exp();
      jj_consume_token(SEMI);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void Exp() throws ParseException {
    RelationalExp();
}

  final public void RelationalExp() throws ParseException {
    ArrayExp();
ASTRelationalExp jjtn001 = new ASTRelationalExp(JJTRELATIONALEXP);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
    try {
      label_10:
      while (true) {
        if (jj_2_25(2)) {
          ;
        } else {
          break label_10;
        }
        RelationalOperator();
        ArrayExp();
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                 }
    }
}

  final public void ArrayExp() throws ParseException {
    CallExp();
ASTArrayExp jjtn001 = new ASTArrayExp(JJTARRAYEXP);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
    try {
      label_11:
      while (true) {
        if (jj_2_26(2)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(LSQUARE);
        CallExp();
        jj_consume_token(RSQUARE);
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                }
    }
}

  final public void CallExp() throws ParseException {
    if (jj_2_29(3)) {
      Identifier();
ASTCallExp jjtn001 = new ASTCallExp(JJTCALLEXP);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
      try {
        label_12:
        while (true) {
          jj_consume_token(DOT);
          Identifier();
          jj_consume_token(LPAREN);
          ExpList();
          jj_consume_token(RPAREN);
          if (jj_2_27(3)) {
            ;
          } else {
            break label_12;
          }
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                   }
      }
    } else if (jj_2_30(3)) {
      AdditiveExp();
ASTCallExp jjtn002 = new ASTCallExp(JJTCALLEXP);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
      try {
        label_13:
        while (true) {
          if (jj_2_28(3)) {
            ;
          } else {
            break label_13;
          }
          jj_consume_token(DOT);
          Identifier();
          jj_consume_token(LPAREN);
          ExpList();
          jj_consume_token(RPAREN);
        }
      } catch (Throwable jjte002) {
if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte002;}
                    }
                    if (jjte002 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte002;}
                    }
                    {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                    }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void AdditiveExp() throws ParseException {
    MultiplicativeExp();
    label_14:
    while (true) {
      if (jj_2_31(3)) {
        ;
      } else {
        break label_14;
      }
      AdditiveOperator();
ASTAdditiveExp jjtn001 = new ASTAdditiveExp(JJTADDITIVEEXP);
                                              boolean jjtc001 = true;
                                              jjtree.openNodeScope(jjtn001);
      try {
        MultiplicativeExp();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                                jjtree.clearNodeScope(jjtn001);
                                                jjtc001 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte001 instanceof RuntimeException) {
                                                {if (true) throw (RuntimeException)jjte001;}
                                              }
                                              if (jjte001 instanceof ParseException) {
                                                {if (true) throw (ParseException)jjte001;}
                                              }
                                              {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                                jjtree.closeNodeScope(jjtn001,  2);
                                              }
      }
    }
}

  final public void MultiplicativeExp() throws ParseException {
    UnaryExp();
    label_15:
    while (true) {
      if (jj_2_32(3)) {
        ;
      } else {
        break label_15;
      }
      MultiplicativeOperator();
ASTMultiplicativeExp jjtn001 = new ASTMultiplicativeExp(JJTMULTIPLICATIVEEXP);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
      try {
        UnaryExp();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                             jjtree.clearNodeScope(jjtn001);
                                             jjtc001 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte001 instanceof RuntimeException) {
                                             {if (true) throw (RuntimeException)jjte001;}
                                           }
                                           if (jjte001 instanceof ParseException) {
                                             {if (true) throw (ParseException)jjte001;}
                                           }
                                           {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  2);
                                           }
      }
    }
}

  final public void UnaryExp() throws ParseException {
    if (jj_2_33(3)) {
      IntegerLiteral();
    } else if (jj_2_34(3)) {
      BooleanLiteral();
    } else if (jj_2_35(3)) {
      ThisLiteral();
    } else if (jj_2_36(2147483647)) {
      LengthExp();
    } else if (jj_2_37(3)) {
      Identifier();
    } else if (jj_2_38(2)) {
      NewClassExp();
    } else if (jj_2_39(2)) {
      NewIntExp();
    } else if (jj_2_40(3)) {
      NotExp();
    } else if (jj_2_41(3)) {
      jj_consume_token(LPAREN);
      Exp();
      jj_consume_token(RPAREN);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void LengthExp() throws ParseException {/*@bgen(jjtree) LengthExp */
  ASTLengthExp jjtn000 = new ASTLengthExp(JJTLENGTHEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      label_16:
      while (true) {
        jj_consume_token(DOT);
        jj_consume_token(LENGTH);
        if (jj_2_42(3)) {
          ;
        } else {
          break label_16;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void RelationalOperator() throws ParseException {/*@bgen(jjtree) RelationalOperator */
  ASTRelationalOperator jjtn000 = new ASTRelationalOperator(JJTRELATIONALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_43(3)) {
        jj_consume_token(LT);
      } else if (jj_2_44(3)) {
        jj_consume_token(GT);
      } else if (jj_2_45(3)) {
        jj_consume_token(AND);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.token = token;
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void AdditiveOperator() throws ParseException {/*@bgen(jjtree) AdditiveOperator */
  ASTAdditiveOperator jjtn000 = new ASTAdditiveOperator(JJTADDITIVEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_46(3)) {
        jj_consume_token(PLUS);
      } else if (jj_2_47(3)) {
        jj_consume_token(MINUS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.token = token;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void MultiplicativeOperator() throws ParseException {/*@bgen(jjtree) MultiplicativeOperator */
  ASTMultiplicativeOperator jjtn000 = new ASTMultiplicativeOperator(JJTMULTIPLICATIVEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_48(3)) {
        jj_consume_token(STAR);
      } else if (jj_2_49(3)) {
        jj_consume_token(FSLASH);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.token = token;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void IntegerLiteral() throws ParseException {Token t;
ASTIntegerConstNode jjtn001 = new ASTIntegerConstNode(JJTINTEGERCONSTNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(INTEGER_LITERAL);
jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
jjtn001.token = t;
    } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
}

  final public void BooleanLiteral() throws ParseException {
    if (jj_2_50(3)) {
ASTTrueNode jjtn001 = new ASTTrueNode(JJTTRUENODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(TRUE);
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    } else if (jj_2_51(3)) {
ASTFalseNode jjtn002 = new ASTFalseNode(JJTFALSENODE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(FALSE);
      } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void ThisLiteral() throws ParseException {
ASTThisNode jjtn001 = new ASTThisNode(JJTTHISNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(THIS);
    } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
}

  final public void NewIntExp() throws ParseException {/*@bgen(jjtree) NewIntArrayNode */
  ASTNewIntArrayNode jjtn000 = new ASTNewIntArrayNode(JJTNEWINTARRAYNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NEW);
      jj_consume_token(INT);
      jj_consume_token(LSQUARE);
      Exp();
      jj_consume_token(RSQUARE);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void NewClassExp() throws ParseException {/*@bgen(jjtree) NewClassNode */
  ASTNewClassNode jjtn000 = new ASTNewClassNode(JJTNEWCLASSNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NEW);
      Identifier();
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void NotExp() throws ParseException {/*@bgen(jjtree) NotNode */
  ASTNotNode jjtn000 = new ASTNotNode(JJTNOTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EXCLAIM);
      Exp();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void Identifier() throws ParseException {/*@bgen(jjtree) Identifier */
                    ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.token = t;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void ExpList() throws ParseException {/*@bgen(jjtree) ExpList */
  ASTExpList jjtn000 = new ASTExpList(JJTEXPLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_53(3)) {
        Exp();
        label_17:
        while (true) {
          if (jj_2_52(3)) {
            ;
          } else {
            break label_17;
          }
          ExpRest();
        }
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void ExpRest() throws ParseException {/*@bgen(jjtree) ExpRest */
  ASTExpRest jjtn000 = new ASTExpRest(JJTEXPREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COMMA);
      Exp();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_33()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_34()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_35()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_36()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_37()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_38()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_39()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_40()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_41()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_42()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_43()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_44()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_45()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_46()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_47()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_48()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_49()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_50()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_51()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_52()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_53()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_3_23()
 {
    if (jj_3R_Statement_168_5_23()) return true;
    return false;
  }

  private boolean jj_3R_Print_187_3_30()
 {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Exp_196_5_47()) return true;
    return false;
  }

  private boolean jj_3R_While_184_3_29()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Exp_196_5_47()) return true;
    return false;
  }

  private boolean jj_3R_If_181_3_28()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Exp_196_5_47()) return true;
    return false;
  }

  private boolean jj_3R_Block_178_3_27()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_Statement_168_5_23()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_ArrayAssign_193_3_32()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_Assign_190_3_31()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_Print_187_3_30()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_FormalRest_154_5_24()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_While_184_3_29()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_If_181_3_28()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_Block_178_3_27()) return true;
    return false;
  }

  private boolean jj_3R_Statement_168_5_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_Identifier_292_5_26()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LSQUARE)) return true;
    if (jj_scan_token(RSQUARE)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_Type_159_5_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_FormalRest_154_5_24()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Type_159_5_25()) return true;
    if (jj_3R_Identifier_292_5_26()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_Type_159_5_25()) return true;
    if (jj_3R_Identifier_292_5_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_MethodDecl_142_5_22()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_VarDecl_137_5_21()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_MethodDecl_142_5_22()) return true;
    return false;
  }

  private boolean jj_3R_MethodDecl_142_5_22()
 {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_3R_Type_159_5_25()) return true;
    if (jj_3R_Identifier_292_5_26()) return true;
    return false;
  }

  private boolean jj_3R_VarDecl_137_5_21()
 {
    if (jj_3R_Type_159_5_25()) return true;
    if (jj_3R_Identifier_292_5_26()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_VarDecl_137_5_21()) return true;
    return false;
  }

  private boolean jj_3R_ClassDeclExtends_130_5_20()
 {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_Identifier_292_5_26()) return true;
    if (jj_scan_token(EXTENDS)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_VarDecl_137_5_21()) return true;
    return false;
  }

  private boolean jj_3R_ClassDeclSimple_123_5_19()
 {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_Identifier_292_5_26()) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_ClassDeclExtends_130_5_20()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_ClassDeclSimple_123_5_19()) return true;
    return false;
  }

  private boolean jj_3R_ClassDecl_117_5_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_ClassDecl_117_5_18()) return true;
    return false;
  }

  private boolean jj_3_52()
 {
    if (jj_3R_ExpRest_303_5_48()) return true;
    return false;
  }

  private boolean jj_3R_ExpRest_303_5_48()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Exp_196_5_47()) return true;
    return false;
  }

  private boolean jj_3_53()
 {
    if (jj_3R_Exp_196_5_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Identifier_292_5_26()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_NotExp_287_5_46()
 {
    if (jj_scan_token(EXCLAIM)) return true;
    if (jj_3R_Exp_196_5_47()) return true;
    return false;
  }

  private boolean jj_3R_NewClassExp_282_5_44()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_Identifier_292_5_26()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_NewIntExp_277_5_45()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LSQUARE)) return true;
    return false;
  }

  private boolean jj_3R_ThisLiteral_272_5_43()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3_51()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_BooleanLiteral_266_5_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) return true;
    }
    return false;
  }

  private boolean jj_3_50()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_scan_token(FSLASH)) return true;
    return false;
  }

  private boolean jj_3R_IntegerLiteral_258_5_41()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  private boolean jj_3_48()
 {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_MultiplicativeOperator_253_5_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) return true;
    }
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_AdditiveOperator_248_5_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) return true;
    }
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_RelationalOperator_245_3_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_LengthExp_240_5_51()
 {
    if (jj_3R_Identifier_292_5_26()) return true;
    Token xsp;
    if (jj_3_42()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_3R_Identifier_292_5_26()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_AdditiveOperator_248_5_37()) return true;
    if (jj_3R_MultiplicativeExp_222_5_38()) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Exp_196_5_47()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_MultiplicativeOperator_253_5_39()) return true;
    if (jj_3R_UnaryExp_227_5_40()) return true;
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_3R_NotExp_287_5_46()) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_3R_NewIntExp_277_5_45()) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_3R_NewClassExp_282_5_44()) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_Identifier_292_5_26()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExp_230_5_49()
 {
    if (jj_3R_LengthExp_240_5_51()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_3R_ThisLiteral_272_5_43()) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_3R_BooleanLiteral_266_5_42()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExp_227_5_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExp_230_5_49()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_3R_IntegerLiteral_258_5_41()) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_Identifier_292_5_26()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_Identifier_292_5_26()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_MultiplicativeExp_222_5_38()
 {
    if (jj_3R_UnaryExp_227_5_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_AdditiveExp_217_5_36()
 {
    if (jj_3R_MultiplicativeExp_222_5_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_scan_token(LSQUARE)) return true;
    if (jj_3R_CallExp_211_5_35()) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_RelationalOperator_245_3_33()) return true;
    if (jj_3R_ArrayExp_206_5_34()) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_AdditiveExp_217_5_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_Identifier_292_5_26()) return true;
    Token xsp;
    if (jj_3_27()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_CallExp_211_5_35()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    return false;
  }

  private boolean jj_3R_ArrayExp_206_5_34()
 {
    if (jj_3R_CallExp_211_5_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_RelationalExp_201_5_50()
 {
    if (jj_3R_ArrayExp_206_5_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Exp_196_5_47()
 {
    if (jj_3R_RelationalExp_201_5_50()) return true;
    return false;
  }

  private boolean jj_3R_ArrayAssign_193_3_32()
 {
    if (jj_3R_Identifier_292_5_26()) return true;
    if (jj_scan_token(LSQUARE)) return true;
    if (jj_3R_Exp_196_5_47()) return true;
    return false;
  }

  private boolean jj_3R_Assign_190_3_31()
 {
    if (jj_3R_Identifier_292_5_26()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_Exp_196_5_47()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MiniJavaParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[53];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJavaParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MiniJavaParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 0; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJavaParser(java.io.Reader stream) {
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new MiniJavaParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MiniJavaParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaParser(MiniJavaParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[48];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 0; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 48; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 53; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			   case 23: jj_3_24(); break;
			   case 24: jj_3_25(); break;
			   case 25: jj_3_26(); break;
			   case 26: jj_3_27(); break;
			   case 27: jj_3_28(); break;
			   case 28: jj_3_29(); break;
			   case 29: jj_3_30(); break;
			   case 30: jj_3_31(); break;
			   case 31: jj_3_32(); break;
			   case 32: jj_3_33(); break;
			   case 33: jj_3_34(); break;
			   case 34: jj_3_35(); break;
			   case 35: jj_3_36(); break;
			   case 36: jj_3_37(); break;
			   case 37: jj_3_38(); break;
			   case 38: jj_3_39(); break;
			   case 39: jj_3_40(); break;
			   case 40: jj_3_41(); break;
			   case 41: jj_3_42(); break;
			   case 42: jj_3_43(); break;
			   case 43: jj_3_44(); break;
			   case 44: jj_3_45(); break;
			   case 45: jj_3_46(); break;
			   case 46: jj_3_47(); break;
			   case 47: jj_3_48(); break;
			   case 48: jj_3_49(); break;
			   case 49: jj_3_50(); break;
			   case 50: jj_3_51(); break;
			   case 51: jj_3_52(); break;
			   case 52: jj_3_53(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
