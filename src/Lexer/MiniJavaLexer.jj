options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
  package Lexer;
  public class MiniJavaParser {}
PARSER_END(MiniJavaParser)


// Insert a specification of a lexical analysis here.
TOKEN : {
    < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)* >   |
    < INTEGER_LITERAL: (<DIGIT>)+ >                  |
    < #LETTER: ["_", "a"-"z", "A"-"Z"] >             |
    < #DIGIT:  ["0"-"9"] >
}

SKIP : {
    " "     |
    "\t"    |
    "\n"    |
    "\r"    |
    < "//" (~["\r", "\n"])* ("\r" | "\n" | "\r\n") >    |
    < "/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/" >
}
// The following is a simple grammar that will allow you
// to test the generated lexer.


void Goal() :
{}
{
  ( MiniJavaToken() )*
  <EOF>
}

void MiniJavaToken():
{}
{
  "class"  |  <IDENTIFIER> | "{" | "public" | "static" | "void" |
  "main" | "(" | "String"  | "[" | "]" | ")" | "}" | "extends" | ";"
  | "return" | "," | "int" | "boolean" | "=" | "if" | "else" | "while"
  | "System.out.println" | "&&" | "<" | "+" | "-" | "*" | "." |
  "length" | <INTEGER_LITERAL> | "true" | "false" | "this" | "new" |
  "!"
}


