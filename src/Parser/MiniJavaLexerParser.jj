options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC = false;
}

PARSER_BEGIN(MiniJavaParser)
  package Parser;
  public class MiniJavaParser {}
PARSER_END(MiniJavaParser)


/* Tokens */
TOKEN : {
    < CLASS: "class" >                               |
    < LBRACE: "{" >                                  |
    < RBRACE: "}" >                                  |
    < PUBLIC: "public" >                             |
    < STATIC: "static" >                             |
    < VOID: "void" >                                 |
    < STRING: "String" >                             |
    < INT: "int" >                                   |
    < BOOLEAN: "boolean" >                           |
    < MAIN: "main" >                                 |
    < EXTENDS: "extends" >                           |
    < RETURN: "return" >                             |
    < IF: "if" >                                     |
    < ELSE: "else" >                                 |
    < WHILE: "while" >                               |
    < TRUE: "true" >                                 |
    < FALSE: "false" >                               |
    < LENGTH: "length" >                             |
    < THIS: "this" >                                 |
    < NEW: "new" >                                   |
    < LPAREN: "(" >                                  |
    < RPAREN: ")" >                                  |
    < OP: <AND> | <LT> | <GT> | <PLUS> | <MINUS> | <STAR> | <FSLASH> >      |
    < #AND: "&&" >                                    |
    < #STAR: "*" >                                    |
    < #FSLASH: "/" >                                  |
    < #PLUS: "+" >                                    |
    < #MINUS: "-" >                                   |
    < PRINT: "System.out.println" >                  |
    < LSQUARE: "[" >                                 |
    < RSQUARE: "]" >                                 |
    < #GT: ">" >                                      |
    < #LT: "<" >                                      |
    < ASSIGN: "=" >                                  |
    < SEMI: ";" >                                    |
    < COMMA: "," >                                   |
    < DOT: "." >                                     |
    < EXCLAIM: "!" >                                 |
    < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)* >   |
    < INTEGER_LITERAL: (<DIGIT>)+ >                  |
    < #LETTER: ["_", "a"-"z", "A"-"Z"] >             |
    < #DIGIT:  ["0"-"9"] >
}

SKIP : {
    " "     |
    "\t"    |
    "\n"    |
    "\r"    |
    < "//" (~["\r", "\n"])* ("\r" | "\n" | "\r\n") >    |
    < "/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/" >
}

/* Grammar */
void Program():
{}
{ MainClass() (ClassDecl())* <EOF> }

void MainClass():
{}
{ <CLASS> <IDENTIFIER> <LBRACE>
    <PUBLIC> <STATIC> <VOID> <MAIN> <LPAREN> <STRING> <LSQUARE> <RSQUARE> <IDENTIFIER> <RPAREN> <LBRACE>
        Statement()
    <RBRACE>
<RBRACE> }

void ClassDecl():
{}
{
    LOOKAHEAD(3)
    <CLASS> <IDENTIFIER> <LBRACE> (VarDecl())* (MethodDecl())* <RBRACE>     |
    <CLASS> <IDENTIFIER> <EXTENDS> <IDENTIFIER> <LBRACE> (VarDecl())* (MethodDecl())* <RBRACE>
}

void VarDecl():
{}
{ Type() <IDENTIFIER> <SEMI> }

void MethodDecl():
{}
{ <PUBLIC> RetType() <IDENTIFIER> <LPAREN> FormalList() <RPAREN> <LBRACE>
    (LOOKAHEAD(2) VarDecl())* (Statement())* <RETURN> Exp() <SEMI>
<RBRACE> }

void FormalList():
{}
{ (Type() <IDENTIFIER> (FormalRest())*)? }

void FormalRest():
{}
{ <COMMA> Type() <IDENTIFIER> }

void Type():
{}
{
    LOOKAHEAD(2)
    <INT> <LSQUARE> <RSQUARE>       |
    <BOOLEAN>                       |
    <INT>                           |
    <IDENTIFIER>
}

void RetType():
{}
{ Type() | <VOID> }

void Statement():
{}
{
    <LBRACE> (Statement())* <RBRACE>                                |
    <IF> <LPAREN> Exp() <RPAREN> Statement() <ELSE> Statement()     |
    <WHILE> <LPAREN> Exp() <RPAREN> Statement()                     |
    <PRINT> <LPAREN> Exp() <RPAREN> <SEMI>                          |
    LOOKAHEAD(2)
    <IDENTIFIER> <ASSIGN> Exp() <SEMI>                              |
    <IDENTIFIER> <LSQUARE> Exp() <RSQUARE> <ASSIGN> Exp() <SEMI>
}

void ExpPrime():
{}
{
    <OP> Exp() ExpPrime()                   |
    <LSQUARE> Exp() <RSQUARE> ExpPrime()    |
    LOOKAHEAD(2)
    <DOT> <LENGTH> ExpPrime()               |
    <DOT> <IDENTIFIER> <LPAREN> ExpList() <RPAREN> ExpPrime()   |
    Empty()
}

void Exp():
{}
{
    <INTEGER_LITERAL> ExpPrime()                        |
    <TRUE> ExpPrime()                                   |
    <FALSE> ExpPrime()                                  |
    <IDENTIFIER> ExpPrime()                             |
    <THIS> ExpPrime()                                   |
    LOOKAHEAD(2)
    <NEW> <INT> <LSQUARE> Exp() <RSQUARE> ExpPrime()    |
    <NEW> <IDENTIFIER> <LPAREN> <RPAREN> ExpPrime()     |
    <EXCLAIM> Exp() ExpPrime()                          |
    <LPAREN> Exp() <RPAREN> ExpPrime()
}

void ExpList():
{}
{ (Exp() (ExpRest())*)? }

void ExpRest():
{}
{ <COMMA> Exp() }

void Empty():
{}
{ {} }